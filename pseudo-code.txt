1) Will need to wrap most everything inside of document.onkeyup = function(event) {
2) Initialize variables before okeyup event
3) Variables:
	*userGuess
	*

	var initialInput = 0;

	onkeyup {
		if (game.initialInput == 1) {


		} else if (initialInput == 0) {
			game.initialInput++;
		} 
	}

1) User presses any key to get started

Display:
	*Computer choooses an option
	*Will need to determine the length of the string of that option
	*inserts the blank spaces into the html div == to the length of the string (these elements will have dynamically generated id's)
	*waits for user to choose an option

Processing:
	* Computer chooses an option from the masterAnswerArray and sets that string == currentAnswerArray
	* Execute split instruction on the currentAnswerArray and sets that == currentAnswerArray (becomes an array of letters from the original string)
	* Take currentAnswerArray and determine length (using .length() function)
	* Move into a for loop (using currentAnswerArray.length as loop limit) and create a string of html content containing unique id's which match array 	  indeces
	* Execute updateHtml instruction to update the blank ticmarks
	* document.onkeyup = function(event) {...} ( captures user input and puts into variable userGuess )
	* 

Variables:
	* initialInput (tracks the first key stroke to start the game)
	* userGuess (person's guess)
	* guessArray (all user guesses during the game (correct and incorrect)
	* masterAnswerArray (array of all possible original choices (Note: this will changes as wins occurr via the removeAnswer function))
	* currentAnswerArray (current game's correct guess as an array of letters): Note: these array indeces will match the html id's
	* correctGuess (stores number of correct guesses)
	* wins (stores number of game wins)
	* losses (stores number games lost)
	* incorrectGuessArray (stores number of incorrect guesses)
	* incorrectGuessLimit (total number of possible game plays/guesses)

Functions:
	* updateHtml (updates html with dynamic content during gameplay)
	* guessArrayPush (pushes userGuess(s) into guessArray)
	* answerSplit (splits the answerArray string (before it's an array) into an array)
	* guessArrayReset (takes the guessArray and removes array contents)
	* removeAnswer (removes possible answer from the array so that the computer is not able to choose it again)
	* logIncorrectGuess (increment the incorrectGuess variable and will decreases possible guesses remaining 
	* displayCorrectLetter (execute the instruction to update the html with the letter which was guessed correctly)
	* checkGuessesLeft (gets the length of the)

Misc:
	*


*use jQuery to dynamically insert spaces into the html (to represent the number of characters present in the answer)
*